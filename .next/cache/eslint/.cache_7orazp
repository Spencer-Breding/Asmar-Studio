[{"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\Gallery\\page.js":"1","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\layout.js":"2","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\page.js":"3","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\galleryItem.js":"4","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\imageGallery.js":"5","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\lightbox.js":"6","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\navbar.js":"7"},{"size":265,"mtime":1694386583589,"results":"8","hashOfConfig":"9"},{"size":512,"mtime":1694269533520,"results":"10","hashOfConfig":"9"},{"size":837,"mtime":1693454177329,"results":"11","hashOfConfig":"9"},{"size":968,"mtime":1694439103936,"results":"12","hashOfConfig":"9"},{"size":4916,"mtime":1694497052846,"results":"13","hashOfConfig":"9"},{"size":7679,"mtime":1694695528386,"results":"14","hashOfConfig":"9"},{"size":3081,"mtime":1694694651463,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xnm7ai",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\Gallery\\page.js",[],[],"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\layout.js",[],[],"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\app\\page.js",[],[],"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\galleryItem.js",[],[],"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\imageGallery.js",[],[],"D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\lightbox.js",["38","39","40","41"],[],"\"use client\";\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport styles from '../styles/Lightbox.module.css';\r\n\r\nconst getPreviewItems = (currentIndex, items) => {\r\n    var startIdx\r\n    if (window.matchMedia(\"(max-width: 37.5em)\").matches) {\r\n        startIdx = currentIndex - 2\r\n    } else {\r\n        startIdx = currentIndex - 3\r\n    }\r\n    var endIdx\r\n    if (window.matchMedia(\"(max-width: 37.5em)\").matches) {\r\n        endIdx = startIdx + 5\r\n    } else {\r\n        endIdx = startIdx + 7\r\n    }\r\n    const placeholder = { source: \"\", description: \"\" };\r\n    let placeholdersBefore = 0;\r\n    let placeholdersAfter = 0;\r\n    if (startIdx < 0) {\r\n        placeholdersBefore = -startIdx;\r\n        startIdx = 0;\r\n    }\r\n\r\n    if (endIdx > items.length) {\r\n        placeholdersAfter = endIdx - items.length;\r\n        endIdx = items.length;\r\n    }\r\n\r\n    return [\r\n        ...Array(placeholdersBefore).fill(placeholder),\r\n        ...items.slice(startIdx, endIdx),\r\n        ...Array(placeholdersAfter).fill(placeholder)\r\n    ];\r\n};\r\n\r\nexport default function Lightbox({ item, items, currentIndex, onClose, onPrev, onNext, onThumbnailClick }) {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [imageAnimation, setImageAnimation] = useState('');\r\n    const [transitioning, setTransitioning] = useState(false);\r\n    let touchStartX = 0;\r\n    let touchEndX = 0;\r\n    const MIN_SWIPE_DISTANCE = 50;\r\n\r\n    var previewIdx\r\n    if (window.matchMedia(\"(max-width: 37.5em)\").matches) {\r\n        previewIdx = 2\r\n    } else {\r\n        previewIdx = 3\r\n    }\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setIsVisible(true), 25);\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    const handleAnimation = useCallback(async (nextIndex, callback) => {\r\n        const direction = nextIndex > currentIndex ? 'left' : 'right';\r\n        const exitAnimation = direction === 'left' ? styles.animateOutToLeft : styles.animateOutToRight;\r\n        const enterAnimation = styles[`animateInFrom${direction === 'left' ? 'Right' : 'Left'}`];\r\n\r\n        setImageAnimation(exitAnimation);\r\n        setTransitioning(true);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 400));\r\n\r\n        callback();\r\n\r\n        requestAnimationFrame(() => {\r\n            setImageAnimation(enterAnimation);\r\n\r\n            requestAnimationFrame(() => {\r\n                setTimeout(() => {\r\n                    setImageAnimation('');\r\n                    setTransitioning(false);\r\n                }, 400);\r\n            });\r\n        });\r\n    }, [currentIndex]);\r\n\r\n    const previewItems = getPreviewItems(currentIndex, items);\r\n\r\n    const handleClose = useCallback(() => {\r\n        setIsVisible(false);\r\n        document.body.style.overflowY = 'auto';\r\n        setTimeout(() => {\r\n            onClose()\r\n        }, 300);\r\n    }, [onClose]);\r\n\r\n    const handleKeyPress = useCallback((event) => {\r\n        if (event.key === 'Escape') {\r\n            handleClose();\r\n        } else if (event.key === 'ArrowRight') {\r\n            if (currentIndex < items.length - 1 && !transitioning) {\r\n                handleAnimation(currentIndex + 1, onNext);\r\n            }\r\n        }\r\n        else if (event.key === 'ArrowLeft') {\r\n            if (currentIndex !== 0 && !transitioning) {\r\n                handleAnimation(currentIndex - 1, onPrev);\r\n            }\r\n        }\r\n    }, [handleClose, currentIndex, items.length, transitioning, handleAnimation, onNext, onPrev]);\r\n\r\n    const handleTouchStart = (e) => {\r\n        touchStartX = e.touches[0].clientX;\r\n    };\r\n\r\n    const handleTouchEnd = (e) => {\r\n        if (transitioning) return;\r\n\r\n        touchEndX = e.changedTouches[0].clientX;\r\n\r\n        const swipeDistance = Math.abs(touchEndX - touchStartX);\r\n\r\n        if (swipeDistance < MIN_SWIPE_DISTANCE) {\r\n            return;\r\n        }\r\n\r\n        if (touchEndX < touchStartX && currentIndex < items.length - 1) {\r\n            handleAnimation(currentIndex + 1, onNext);\r\n        } else if (touchEndX > touchStartX && currentIndex > 0) {\r\n            handleAnimation(currentIndex - 1, onPrev);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyPress);\r\n        document.addEventListener('touchstart', handleTouchStart);\r\n        document.addEventListener('touchend', handleTouchEnd);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKeyPress);\r\n            document.removeEventListener('touchstart', handleTouchStart);\r\n            document.removeEventListener('touchend', handleTouchEnd);\r\n        };\r\n    }, [handleKeyPress, handleTouchEnd, handleTouchStart]);\r\n\r\n    return (\r\n        <div className={`${styles.lightbox} ${isVisible ? styles.fadeIn : styles.fadeOut}`}>\r\n            <button className={styles.closeButton} onClick={handleClose}>X</button>\r\n            {currentIndex !== 0 && (\r\n                <button\r\n                    className={`${styles.arrowButton} ${styles.left}`}\r\n                    disabled={transitioning}\r\n                    onClick={() => handleAnimation(currentIndex - 1, onPrev)}\r\n                >\r\n                    &#10094;\r\n                </button>\r\n            )}\r\n            {currentIndex !== (items.length - 1) && (\r\n                <button\r\n                    className={`${styles.arrowButton} ${styles.right}`}\r\n                    disabled={transitioning}\r\n                    onClick={() => handleAnimation(currentIndex + 1, onNext)}\r\n                >\r\n                    &#10095;\r\n                </button>\r\n            )}\r\n            <div className={styles.imageContainer} onTouchStart={handleTouchStart}\r\n                onTouchEnd={handleTouchEnd}>\r\n                <div className={`${styles.mainImageContainer} ${imageAnimation}`}>\r\n                    <div className={styles.mainImageWrapper}>\r\n                        <img className={styles.mainImage} src={item.source} alt={item.description} />\r\n                    </div>\r\n                    <p className={styles.imageDescription}>{item.description}</p>\r\n                </div>\r\n                <div className={styles.previewContainer}>\r\n                    {previewItems.map((previewItem, index) => {\r\n                        const actualIndex = currentIndex + index - previewIdx;\r\n                        const isPlaceholder = previewItem.source === \"\";\r\n\r\n                        if (isPlaceholder) {\r\n                            return (\r\n                                <div\r\n                                    className={styles.placeholder}\r\n                                    key={index}\r\n\r\n                                />\r\n                            );\r\n                        }\r\n\r\n                        return (\r\n                            <img\r\n                                key={index}\r\n                                src={previewItem.source}\r\n                                alt={previewItem.description}\r\n                                className={`${styles.previewImage} ${index === previewIdx ? styles.selectedPreview : ''}`}\r\n                                onClick={() => {\r\n                                    if (actualIndex === currentIndex) {\r\n                                        return;\r\n                                    }\r\n                                    if (!transitioning) {\r\n                                        handleAnimation(actualIndex, () => onThumbnailClick(actualIndex));\r\n                                    }\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\Users\\Spencer\\Documents\\GitHub\\Asmar Studio\\asmar-studio\\src\\components\\navbar.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":106,"column":11,"nodeType":"44","endLine":108,"endColumn":6,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":110,"column":11,"nodeType":"44","endLine":126,"endColumn":6,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":164,"column":25,"nodeType":"50","endLine":164,"endColumn":102},{"ruleId":"48","severity":1,"message":"49","line":184,"column":29,"nodeType":"50","endLine":197,"endColumn":31},"react-hooks/exhaustive-deps","The 'handleTouchStart' function makes the dependencies of useEffect Hook (at line 137) change on every render. To fix this, wrap the definition of 'handleTouchStart' in its own useCallback() Hook.","VariableDeclarator",["51"],"The 'handleTouchEnd' function makes the dependencies of useEffect Hook (at line 137) change on every render. To fix this, wrap the definition of 'handleTouchEnd' in its own useCallback() Hook.",["52"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Wrap the definition of 'handleTouchStart' in its own useCallback() Hook.",{"range":"57","text":"58"},"Wrap the definition of 'handleTouchEnd' in its own useCallback() Hook.",{"range":"59","text":"60"},[3513,3573],"useCallback((e) => {\r\n        touchStartX = e.touches[0].clientX;\r\n    })",[3605,4128],"useCallback((e) => {\r\n        if (transitioning) return;\r\n\r\n        touchEndX = e.changedTouches[0].clientX;\r\n\r\n        const swipeDistance = Math.abs(touchEndX - touchStartX);\r\n\r\n        if (swipeDistance < MIN_SWIPE_DISTANCE) {\r\n            return;\r\n        }\r\n\r\n        if (touchEndX < touchStartX && currentIndex < items.length - 1) {\r\n            handleAnimation(currentIndex + 1, onNext);\r\n        } else if (touchEndX > touchStartX && currentIndex > 0) {\r\n            handleAnimation(currentIndex - 1, onPrev);\r\n        }\r\n    })"]